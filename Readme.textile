h2. Rails Has Many Friends Plugin Tutorial

p. Add social networking to your site with the _Has Many Friends_ plugin. With this tutorial your site users can search for other users by email address and send a friend request. If the request is accepted, a friendship is established and the social networking commences. If the searched for site user is not yet a member, an email invitation can be sent out.

p. This tutorial assumes that you already have a base project set up with a users table that has login and email columns. If you are starting from scratch I suggest you take a look at the "Cortex Engine":https://github.com/XFinger/cortex_engine -- a base rails setup that includes user authentication with authlogic, action-mailers and a few other features to get you up and running. 

p. This tutorial uses a little bit of Ajax and requires that prototype is linked to in the head section of your layout. If you are using the Cortex Engine please see the JavaScript section of the readme.

h4. Get Started

p. Install the HasManyFriends plugin

bq. script/plugin install git://github.com/swemoney/has_many_friends.git

p. Run the generator

bq. script/generate hmf_friendship_model Friendship

p. This will set up your friendship model and create a migration file:

pre. class CreateFriendships < ActiveRecord::Migration
  def self.up
    create_table :friendships, :force => true do |t|
      t.column "user_id",     :integer, :null => false
      t.column "friend_id",   :integer, :null => false
      t.column "created_at",  :datetime
      t.column "accepted_at", :datetime
    end
  end
  def self.down
    drop_table :friendships
  end
end

p. Rake the migration

bq. rake db:migrate

p. Generate a controller

bq. script/generate controller friendships

h4. friendships_controller.rb 

p. The *invitation* action uses action-mailer to send invitations to become a site member. We will write the mailer part later in the tutorial. Notice: the format.js in the respond_to block, we need this for our Ajax function (invitation.rjs).
 
pre. def invitation
   user = current_user
   recipient = params[:email]    
     UserMailer.deliver_invite(user, recipient)
     flash[:notice] = "Invitation Sent"  
      respond_to do |format|
       format.html
       format.js 
      end
 end

p. The *index* action lets us search for _friends_ and returns an Ajax response.

pre. def index
    @lookup = params[:search]
    @result= User.find(:first, :conditions =>['email = ?', @lookup ]) 
    @friends = current_user.friends
    respond_to do |format|
      format.html
      format.js 
    end
 end 

p. The *show* action

pre. def show   
    @friends = current_user.friends
    @pending_by_me = current_user.pending_friends_by_me
    @pending_for_me = current_user.pending_friends_for_me  
  end

p. The *new* action initiates the friendship by sending a request to the specified user.

pre. def new
   @user=current_user
   @rf = User.find(params[:id])
   @user.request_friendship_with @rf
   flash[:notice] = "sent friendship request to #{@rf.login.capitalize} " 
   redirect_to :back 
 end 

p. The *accept* action completes the frindship

pre. def accept
    @user=current_user    
    @accept = User.find(params[:id])
    @user.accept_friendship_with @accept    
     redirect_to :back
  end

p. The *sever* action deletes the friendship

pre. def sever
    @user = current_user
    @id = params[:id]
    @sever = User.find(@id)
    @user.delete_friendship_with @sever
    flash[:notice] = "friendship canceled"  
    redirect_to :back      
  end 

p. Add routing to *config/routes*

bq. map.resources :friendships

h3. View Templates

h4. show.html.erb

p. The show template handles 5 different actions. It displays a friends list, contains a search form that returns an Ajax response, displays a list of friendship requests (from other users) and displays a list of sent friendship requests.


pre. <h3>Manage Friends</h3> 
<b>My Friends</b><br>
   <%@friends.each do |fr| %>	
     <%= fr.login.capitalize %>  
     <%= link_to "Delete",  :controller => 'friendships', :action => 'sever', :id => fr.id %>
   <%end%>
 	
pre. <% form_remote_tag  :url => '/friendships/index'  do  %>
    Find friends by email address
    <%=  text_field_tag :search, params[:search], :size => 20  %>
    <%= submit_tag "Search" %>
<% end %>
	
pre. <div id = 'ajax_space'></div>  <!-- provides a space for the Ajax response-->			
 	
pre. <% if @pending_for_me.size > 0 %><!-- only displays if user has friendship requests -->
    <div>
      <b>Frindship Requests:</b>
      <ul>
         <% @pending_for_me.each do |pfm|%>				
	 <li>
	     <%= pfm.login.capitalize %>,
             <%= pfm.email%> 
	     <%= link_to ' ...Accept', :controller => 'friendships', :action => 'accept', :id => pfm.id %> 
	 </li> 
	 <%end%>
      </ul>
</div>
<%end%>
 	
pre. <% if @pending_by_me.size > 0 %><!-- only displays if user has pending friendship requests -->		 
  <div>
    <b>You have sent a friendship request to:</b>
    <ul>
       <% @pending_by_me.each do |pbf|%>
         <li><%= pbf.login.capitalize %>, <%= pbf.email%> </li>	
       <%end%>
    </ul>
  </div>
<%end%>		

h4. _index.html.erb 

p. The index partial shows the search response

pre. <% if @result.blank? %>
  A user with email: <b><%= @lookup %></b> was not found. 
  <%= link_to_remote 'Email an invitation?', :url=> {:controller => 'friendships',
  :action =>'invitation', :email => @lookup}, :method => 'post'%>
<%else%>
  User found: 
  <%= @result.login.capitalize%>,   
  <%= @result.email %>
  <% if @friends.include? @result %>
     is already in your share list.  
  <%else%>  	
    <%= link_to 'Send Share Request?', :controller => 'friendships', :action => 'new', :id => @result.id%>
  <%end%>
<%end%>

h4. Ajax

h4. invitation.rjs

pre. page.reload
page[:search].value = ""

h4. index.rjs

pre. page.insert_html :bottom, :ajax_space, :partial => 'index'
flash.discard

h3. Action-mailer

p. The mailer settings are set up to use smtp with gmail.

h4. models/user_mailer.rb

pre. class UserMailer < ActionMailer::Base    
  def invite(user, recipient) 
    @user=user
    @subject = "Invitation"
    @from = "my website"
    @body[:url] = "http://192.168.1.3:3004"  #set to your ip address or domain name
    @recipients = recipient
    @sent_on = Time.now
    content_type 'text/html' 
  end
end

h4. config/initializers/smtp_gmail.rb

pre. require "smtp_tls"    
  mailer_config = File.open("#{RAILS_ROOT}/config/mailer.yml") 
  mailer_options = YAML.load(mailer_config) 
  ActionMailer::Base.smtp_settings = mailer_options 
     

pre. ActionMailer::Base.smtp_settings = {
   :address => "smtp.gmail.com",
   :port => 587,
   :authentication => :plain,
   :enable_starttls_auto => true,
   :user_name => "your gmail address",
   :password => "your gmail password"
 }

h4. config/mailer.yml

pre. :address: smtp.gmail.com
  :port: 587
  :user_name: your gmail address 
  :authentication: plain

h4. user_mailer/invite.html.erb -- html mail template

pre. <!DOCTYPE html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  </head>
  <body>
    <h4>Welcome, </h4>
    <p>
       <%= @user.login.capitalize %> ( <%= @user.email %> ) has invited you to join this web site.
    </p>
    <p>
      To sign up or for more information go to <%= @url %>.
    </p>
    <p>Thanks, <br>
	 The Web
	</p>
  </body>
</html>

h4. user_mailer/invite.text.erb -- plain text template

pre. Welcome, 
<%= @user.login.capitalize %> (<%= @user.email %>) has invited you to join has 
invited you to join this web site.
To sign up or for more information go to <%= @url %>. 	
Thanks,
The Web

p. Fire up your server and test everything out.

h3. Relevant Links

 * "Has Many Friends Plugin":https://github.com/swemoney/has_many_friends
 * "Cortex Engine":https://github.com/XFinger/cortex_engine 
